{"version":3,"sources":["components/miniDrawer.js","components/Header/index.js","components/loading.js","components/Home.js","components/About.js","components/Contact.js","components/Error.js","components/PaginationDot.js","components/Pagination.js","components/Navigation.js","components/Agreement.js","components/Privacy.js","components/Offer.js","App.js","serviceWorker.js","index.js"],"names":["iOS","process","browser","test","navigator","userAgent","useStyles","makeStyles","theme","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","contentShift","PersistentDrawerLeft","classes","useTheme","React","useState","open","setOpen","handleDrawerOpen","handleDrawerClose","className","onTouchEnd","onMouseUp","position","clsx","color","aria-label","onClick","onTouchStart","onTouchMove","edge","variant","noWrap","disableBackdropTransition","disableDiscovery","onMouseLeave","anchor","paper","direction","href","button","primary","Header","Component","apilink","StyledRating","withStyles","iconFilled","iconHover","Rating","containerStyle","flexWrap","itemStyle","minWidth","textAlign","boxSizing","defaultOptions","loop","autoplay","animationData","rippleLoading","rendererSettings","preserveAspectRatio","defaultOptions2","doneData","OrganisatorInfo","props","Chip","component","target","rel","user","link","clickable","avatar","Avatar","alt","src","label","username","SponsorInfo","TableRow","key","follower","id","TableCell","size","linkFollower","avatarFollower","usernameFollower","Loading","state","randomItem","undefined","loadingTextArray","randomLoadingTextenerator","Math","floor","random","length","handleChipClick","console","info","scrollToMyRef","window","scrollTo","tableRef","current","offsetTop","done","loading","loadingFollowers","doneFollowers","usersMain","allJoin","expandedRows","accessToken","isToggleOn","clickedUserFollowers","showGive","createRef","this","setState","randomLoadingText","self","setTimeout","fetch","method","then","response","status","Error","json","data","catch","err","log","rowId","username2Get","currentExpandedRows","newExpandedRows","includes","filter","concat","prevState","item","itemRows","Fragment","scope","ref","Box","Skeleton","height","Tooltip","title","TransitionComponent","Fade","interactive","arrow","border","borderColor","borderRadius","handleRowClick","borderBottom","Typography","giveinfo","mb","IconButton","e","name","defaultValue","rating","getLabelText","value","precision","icon","fontSize","push","in","style","gutterBottom","map","collumn","allItemRows","perItemRows","renderItem","TableContainer","Paper","Table","TableHead","TableBody","class","options","home","About","Contact","styles","cursor","background","dot","backgroundColor","margin","active","PaginationDot","handleClick","event","index","styleDot","Object","assign","type","bottom","right","flexDirection","Pagination","onChangeIndex","dots","children","i","AutoPlaySwipeableViews","autoPlay","SwipeableViews","stylesTab","tabs","slide","minHeight","slide1","slide2","slide3","Agreement","Privacy","Offer","handleInputChange","handleSubmit","checkValidity","preventDefault","offerUserName","offerUserGiveinfo","offer","offerUserAvatar","confirm","alert","axios","post","document","getElementById","reset","location","error","bind","onSubmit","placeholder","onChange","required","rows","cols","themeLight","createMuiTheme","palette","themeDark","App","onThemeChange","isThemeLight","fetchMoreData","childVisible","navitem","setNav","onClickMainUser","fallback","ThemeProvider","CssBaseline","marginTop","path","Home","exact","Footer","BottomNavigation","newValue","showLabels","FormControlLabel","control","Switch","checked","lazy","Boolean","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bfef9293.chunk.js","sourcesContent":["import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n// import InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport MonetizationOnIcon from '@material-ui/icons/MonetizationOn';\r\n// import MailIcon from '@material-ui/icons/Mail';\r\nimport AssignmentIndIcon from '@material-ui/icons/AssignmentInd';\r\n// import { NavLink } from 'react-router-dom';\r\n// import Loading from \"./loading.js\";\r\n// import SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\r\n\r\n// import Navigation from './Navigation';\r\n// import { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n// import Home from './Home';\r\n// import About from './About';\r\n// import Contact from './Contact';\r\n// import Error from './Error';\r\n// // import Navigation from './components/Navigation';\r\n// import Agreement from './Agreement';\r\n// import Privacy from './Privacy';\r\nimport GroupWorkIcon from '@material-ui/icons/GroupWork';\r\n\r\nconst iOS = process.browser && /iPad|iPhone|iPod/.test(navigator.userAgent);\r\nconst drawerWidth = 240;\r\nconst apilink = \"http://api.instagive.ga/\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: 'flex-end',\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginLeft: -drawerWidth,\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginLeft: 0,\r\n  },\r\n}));\r\n\r\nexport default function PersistentDrawerLeft() {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root} onTouchEnd={handleDrawerOpen} onMouseUp={handleDrawerOpen}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n      >\r\n\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            onTouchStart={handleDrawerOpen}\r\n            onTouchMove={handleDrawerOpen}\r\n            edge=\"start\"\r\n            className={clsx(classes.menuButton, open && classes.hide)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap>\r\n            Меню\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer disableBackdropTransition={!iOS} disableDiscovery={iOS} onTouchEnd={handleDrawerClose} onMouseLeave={handleDrawerClose}\r\n        className={classes.drawer}\r\n        variant=\"persistent\"\r\n        anchor=\"left\"\r\n        open={open}\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n      >\r\n        <div className={classes.drawerHeader}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n\r\n        <List>\r\n          <a href=\"/\">\r\n            <ListItem button >\r\n              <ListItemIcon>{<HomeIcon />}</ListItemIcon>\r\n              <ListItemText primary=\"Главная\" />\r\n\r\n            </ListItem>\r\n          </a>\r\n          <Divider />\r\n          <a href=\"/\">\r\n            <ListItem button >\r\n              <ListItemIcon>{<MonetizationOnIcon />}</ListItemIcon>\r\n              <ListItemText primary=\"Спонсорам\" />\r\n\r\n            </ListItem>\r\n          </a>\r\n\r\n            <a href=\"/offer\">\r\n              <ListItem button >\r\n                <ListItemIcon>{<AssignmentIndIcon />}</ListItemIcon>\r\n                <ListItemText primary=\"Организаторам\" />\r\n\r\n              </ListItem>\r\n            </a>\r\n\r\n\r\n          <Divider />\r\n          <a href={apilink}>\r\n            <ListItem button >\r\n              <ListItemIcon>{<GroupWorkIcon />}</ListItemIcon>\r\n              <ListItemText primary=\"Панель управления\" />\r\n\r\n            </ListItem>\r\n          </a>\r\n\r\n          {/* {['Спонсорам', 'Организаторам'  ].map((text, index) => (\r\n            <ListItem button key={text}>\r\n              <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n              <ListItemText primary={text} />\r\n            </ListItem>\r\n          ))} */}\r\n\r\n        </List>\r\n        <Divider />\r\n        {/* <List>\r\n          {['All mail', 'Trash', 'Spam'].map((text, index) => (\r\n            <ListItem button key={text}>\r\n              <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n              <ListItemText primary={text} />\r\n            </ListItem>\r\n          ))}\r\n        </List> */}\r\n      </Drawer>\r\n      {/* <main\r\n        className={clsx(classes.content, {\r\n          [classes.contentShift]: open,\r\n        })}\r\n      >\r\n\r\n\r\n        <BrowserRouter>\r\n          <div>\r\n            <Navigation />\r\n\r\n\r\n            <Switch>\r\n              <Route path=\"/\" component={Home} exact />\r\n              <Route path=\"/about\" component={About} />\r\n              <Route path=\"/contact\" component={Contact} />\r\n              <Route path=\"/privacy\" component={Privacy} />\r\n              <Route path=\"/agreement\" component={Agreement} />\r\n              <Route component={Error} />\r\n            </Switch>\r\n          </div>\r\n        </BrowserRouter>\r\n\r\n\r\n      </main> */}\r\n    </div>\r\n  );\r\n}","// src/components/Header/index.js\r\nimport React from \"react\";\r\n\r\nimport \"./Header.css\";\r\n \r\nclass Header extends React.Component {\r\n\r\n  render() {\r\n\r\n\r\n    return (\r\n      <nav className=\"Nav\">\r\n\r\n        <div className=\"Nav-menus\">\r\n\r\n          <div className=\"Nav-brand\">\r\n\r\n            <a className=\"Nav-brand-logo\" href=\"/\">\r\n            \r\n\r\n            </a>\r\n            {/* <BrowserRouter>\r\n                <div>\r\n                  <Navigation />\r\n                  <Switch>\r\n                    <Route path=\"/\" component={Home} exact />\r\n                    <Route path=\"/about\" component={About} />\r\n                    <Route path=\"/contact\" component={Contact} />\r\n                    <Route path=\"/privacy\" component={Privacy} />\r\n                    <Route path=\"/agreement\" component={Agreement} />\r\n                    <Route component={Error} />\r\n                  </Switch>\r\n                </div>\r\n              </BrowserRouter> */}\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\nexport default Header;","import React, { useState, useRef } from \"react\";\r\nimport FadeIn from \"react-fade-in\";\r\nimport Lottie from \"react-lottie\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n// import * as legoData from \"./legoloading.json\";\r\nimport * as doneData from \"./doneloading.json\";\r\n// import * as scrollFrames from \"./scrollframesloading.json\"\r\n// import * as sckeletonFrames from \"./skeletonframesloading.json\"\r\nimport * as rippleLoading from \"./rippleloading.json\"\r\nimport './loading.css';\r\n// import Button from '@material-ui/core/Button';\r\n\r\n// import PropTypes from 'prop-types';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\n// import Collapse from '@material-ui/core/Collapse';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Fade from '@material-ui/core/Fade';\r\n// import Zoom from '@material-ui/core/Zoom';\r\n// import Grow from '@material-ui/core/Grow';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Chip from '@material-ui/core/Chip';\r\n// import FaceIcon from '@material-ui/icons/Face';\r\n// import DoneIcon from '@material-ui/icons/Done';\r\n// import Grid from '@material-ui/core/Grid';\r\n\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport MonetizationOnIcon from '@material-ui/icons/MonetizationOn';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport PaymentIcon from '@material-ui/icons/Payment';\r\nimport AccountBalanceWalletIcon from '@material-ui/icons/AccountBalanceWallet';\r\nimport { TableFooter } from \"@material-ui/core\";\r\n// import clsx from 'clsx';\r\n// import { AutoSizer, Column, Table } from 'react-virtualized';\r\n\r\n// require('dotenv').config({ path: __dirname + '/./../.env' }) //Загружаем файл с переменными среды\r\n\r\nconst apilink = \"http://api.instagive.ga/\";\r\n\r\nconst StyledRating = withStyles({\r\n    iconFilled: {\r\n        color: '#ff6d75',\r\n    },\r\n    iconHover: {\r\n        color: '#ff3d47',\r\n    },\r\n})(Rating);\r\n\r\n\r\n\r\n//Для таблицы\r\nconst numItemsPerRow = 8; //Максимально элементов в строке для полноэкранного\r\n\r\nconst containerStyle = {\r\n    display: \"flex\",\r\n    width: \"200%\", // Трюк, чтобы охватить 2 столбца. Костыль\r\n    flexWrap: \"wrap\"\r\n};\r\n\r\nconst itemStyle = {\r\n    minWidth: `${100 / numItemsPerRow}%`,\r\n    textAlign: \"center\",\r\n    // border: \"1px solid black\",\r\n    boxSizing: \"border-box\"\r\n};\r\n\r\n\r\n\r\nconst defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: rippleLoading.default,\r\n    rendererSettings: {\r\n        preserveAspectRatio: \"xMidYMid slice\"\r\n    }\r\n};\r\nconst defaultOptions2 = {\r\n    loop: false,\r\n    autoplay: true,\r\n    animationData: doneData.default,\r\n    rendererSettings: {\r\n        preserveAspectRatio: \"xMidYMid slice\"\r\n    }\r\n};\r\n\r\nfunction OrganisatorInfo(props) {\r\n    return (\r\n        <Chip color=\"primary\"\r\n            component=\"a\" target=\"_blank\" rel=\"noopener noreferrer\" href={props.user.link} clickable\r\n            avatar={<Avatar alt=\"OrganisatorAvatar\" src={props.user.avatar} />}\r\n            label={props.user.username /*+ \" Подпишись\"*/}\r\n        // onClick={handleChipClick}\r\n        />\r\n    )\r\n}\r\nfunction SponsorInfo(props) {\r\n    return (\r\n        <TableRow key={props.follower.id} >\r\n            <TableCell className=\"paddingRow\">\r\n                {/* <Grid item xs \r\n        container\r\n        direction=\"row\"\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n        > */}\r\n                <Chip color=\"secondary\" size=\"small\"\r\n                    component=\"a\" target=\"_blank\" rel=\"noopener noreferrer\" href={props.follower.linkFollower} clickable\r\n                    avatar={<Avatar alt=\"SponsorAvatart\" src={props.follower.avatarFollower} />}\r\n                    label={props.follower.usernameFollower /*+ \" Подпишись\"*/}\r\n                // onClick={handleChipClick}\r\n                />\r\n                {/* </Grid>   */}\r\n            </TableCell>\r\n\r\n            {/* OLD */}\r\n\r\n            {/* <TableCell className=\"paddingRow\">>\r\n<a target=\"_blank\" rel=\"noopener noreferrer\" href={collumn.linkFollower}>\r\n                <img className=\"instaImage\" border=\"0\" alt=\"FollowImage\" src={collumn.avatarFollower} width=\"100\" height=\"100\"></img>\r\n            </a>\r\n            <a className=\"Loading-give-text\" target=\"_blank\" rel=\"noopener noreferrer\" href={collumn.linkFollower}>{collumn.usernameFollower}</a>\r\n        </TableCell>\r\n        <TableCell>\r\n            <a align=\"right\" target=\"_blank\" rel=\"noopener noreferrer\" onClick={this.handleButtonClick} href={collumn.linkFollower} class=\"btn btn-primary\">Подпишись</a>\r\n        </TableCell> */}\r\n\r\n            {/* <a align=\"right\" target=\"_blank\" rel=\"noopener noreferrer\" onClick={this.handleButtonClick} href={\"https://www.instagram.com/web/friendships/\"+ collumn.useridFollower + this.state.isToggleOn ? '/follow/' : '/unfollow/'} class=\"btn btn-primary\"> {this.state.isToggleOn ? 'Подпишись' : 'Отписаться'}</a> */}\r\n        </TableRow>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default class Loading extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            done: undefined,\r\n            // user: undefined,\r\n            loading: undefined,\r\n            loadingFollowers: undefined,\r\n            doneFollowers: undefined,\r\n            usersMain: [],\r\n            allJoin: [],\r\n            expandedRows: [],\r\n            accessToken: '',\r\n            isToggleOn: true, //ПОдписка\r\n            open: false,\r\n            clickedUserFollowers: [], //Для спонсоров\r\n            showGive: undefined, // Показать раздачи?\r\n        };\r\n\r\n        this.tableRef = React.createRef();\r\n\r\n        // Эта привязка обязательна для работы `this` в колбэке.\r\n        // this.handleButtonClick = this.handleButtonClick.bind(this);\r\n        // this.handleChange = this.handleChange.bind(this);\r\n\r\n    }\r\n    state = {\r\n        randomItem: '',\r\n\r\n        setOpen: undefined\r\n    }\r\n\r\n    loadingTextArray = [\r\n        'разгружаем вагоны...',\r\n        \"готовим пиццу...\",\r\n        \"ждем...\",\r\n        \"участвуем в...\",\r\n        \"загрузка...\",\r\n        \"приводим в порядок...\",\r\n        // \"...\",\r\n        \"подгружаем ...\",\r\n        \"общаемся...\",\r\n        // \"встречаемся...\",\r\n        \"обновляем...\",\r\n        \"читаем мануал...\",\r\n        \"здесь будет таблица...\",\r\n        \"изучаем JS...\",\r\n        \"соединяем...\",\r\n        \"читаем из базы...\",\r\n    ];\r\n    randomLoadingTextenerator = () => (\r\n        this.loadingTextArray[Math.floor(Math.random() * this.loadingTextArray.length)]\r\n    )\r\n\r\n\r\n    // handleButtonClick() {\r\n    //     this.setState(state => ({\r\n    //         isToggleOn: !state.isToggleOn\r\n    //     }));\r\n    // }\r\n\r\n\r\n    handleChipClick = () => {\r\n        console.info('You clicked the Chip.');\r\n    };\r\n\r\n    componentDidMount() {\r\n\r\n        this.setState({ randomLoadingText: this.randomLoadingTextenerator() })\r\n\r\n        //Subscribtion MAIN accs\r\n        let self = this;\r\n        setTimeout(() => {\r\n            // only show =1 \r\n            fetch(apilink + 'onlyshow', {\r\n                //fetch('https://dry-plains-18498.herokuapp.com/mainusers', { \r\n                method: 'GET'\r\n            }).then(function (response) {\r\n                if (response.status >= 400) {\r\n                    throw new Error(\"Bad response from server\");\r\n                }\r\n                return response.json();\r\n            }).then(function (data) {\r\n                self.setState({ loading: true });\r\n                self.setState({ usersMain: data });\r\n                setTimeout(() => {\r\n                    self.setState({ done: true });\r\n                }, 1000);\r\n            }).catch(err => {\r\n                console.log('caught it!', err);\r\n            })\r\n\r\n            fetch(apilink + 'alljoin', {\r\n                method: 'GET'\r\n            }).then(function (response) {\r\n                if (response.status >= 400) {\r\n                    throw new Error(\"Bad response from server\");\r\n                }\r\n                return response.json();\r\n            }).then(function (data) {\r\n                self.setState({ loadingFollowers: true });\r\n                self.setState({ allJoin: data });\r\n                setTimeout(() => {\r\n                    self.setState({ doneFollowers: true });\r\n                }, 1000);\r\n            }).catch(err => {\r\n                console.log('caught it!', err);\r\n            })\r\n\r\n\r\n        }, 1200);\r\n\r\n\r\n        //         //Followers\r\n        // const size = 100;\r\n        // // const size = 4;\r\n        // var rsponsors = [...this.state.allJoin];\r\n        // const res = rsponsors.reduce((acc, curr, i) => {\r\n        //     if (!(i % size)) {    // if index is 0 or can be divided by the `size`...\r\n        //         acc.push(rsponsors.slice(i, i + size));   // ..push a chunk of the original array to the accumulator\r\n        //     }\r\n        //     return acc;\r\n        // }, []);\r\n\r\n        // this.setState({allJoin: res})\r\n\r\n    }\r\n    componentWillUnmount() {\r\n        this.setState({ loading: true, loadingFollowers: true, allJoin: undefined, usersMain: undefined, doneFollowers: false, done: false, clickedUserFollowers: undefined })\r\n    }\r\n    // shouldComponentUpdate(nextProps, nextState) {\r\n    //     if (this.props.color !== nextProps.color) {\r\n    //       return true;\r\n    //     }\r\n    //     if (this.state.count !== nextState.count) {\r\n    //       return true;\r\n    //     }\r\n    //     return false;\r\n    //   }\r\n\r\n    // shouldComponentUpdate(nextProps, nextState) {\r\n    //     // return this.state.usersMain != nextState.usersMain;\r\n    //   }\r\n\r\n    // componentDidUpdate(prevProps) { //\r\n    //     // Популярный пример (не забудьте сравнить пропсы):\r\n    //     if (this.props.userID !== prevProps.userID) {\r\n    //         this.fetchData(this.props.userID);\r\n    //     }\r\n    // }\r\n\r\n    // componentWillUpdate(prevProps) { //\r\n    //     // Популярный пример (не забудьте сравнить пропсы):\r\n    //     if (this.props.userID !== prevProps.userID) {\r\n    //         this.fetchData(this.props.userID);\r\n    //     }\r\n    // }\r\n\r\n\r\n    handleRowClick(rowId, username2Get) {\r\n        //Load Data\r\n        // let self = this;\r\n        // Загружаем только фолловеров кликнутого! - Передаем в бэк запросом POST - item.username\r\n        \r\n\r\n\r\n\r\n        const currentExpandedRows = this.state.expandedRows;\r\n        const isRowCurrentlyExpanded = currentExpandedRows.includes(rowId);\r\n\r\n        //В зависимости от строки, нажата или нет?\r\n        const newExpandedRows = isRowCurrentlyExpanded ?\r\n            currentExpandedRows.filter(id => id !== rowId) :\r\n            currentExpandedRows.concat(rowId);\r\n\r\n        // this.setState({ expandedRows: newExpandedRows, open: true });\r\n\r\n        this.setState(prevState => ({ expandedRows: newExpandedRows, open: !prevState.open }));\r\n\r\n        // //Скроллит в середину\r\n        // if (!isRowCurrentlyExpanded)\r\n        //     this.scrollToMyRef();\r\n\r\n        // !isRowCurrentlyExpanded ? this.scrollToMyRef():\r\n\r\n        {/* Должны получить имя организатора item.username - запрос к БД на получение фолловеров именно этого спонсора */ }\r\n\r\n\r\n        // this.state.open = true;\r\n        // this.setState(prevState => ({ open: !prevState.open }));\r\n\r\n    }\r\n\r\n\r\n    //Элементы таблицы, данные\r\n    renderItem(item) {\r\n        const clickCallback = () => {\r\n            // Сделать разворот только при нажатии на поле (на ник не должно ничего происходить)\r\n            this.handleRowClick(item.id, item.username);\r\n\r\n            //Load Data\r\n            //    this.setState(prevState => ({ open: !prevState.open })) \r\n        };\r\n\r\n\r\n        const itemRows = [\r\n            <React.Fragment>\r\n                {/* <TableCell>\r\n\r\n        </TableCell> */}\r\n                <TableRow  /* onClick={clickCallback} onMouseEnter={this.handleMouseEnter} onMouseLeave={this.handleMouseLeave} */ key={\"row-data-\" + item.id }>\r\n                    {/* <TableCell component=\"th\" scope=\"row\"> */}\r\n                    {/* <Tooltip TransitionComponent={Zoom} title=\"Нажми сюда чтобы открыть аккаунт организатора\" > */}\r\n                    <TableCell scope=\"row\" ref={this.tableRef} >\r\n                        {!this.state.doneFollowers ? (<Skeleton variant=\"circle\" width=\"50px\" height=\"50px\" />) : (\r\n\r\n                            < Box >\r\n\r\n                                {/* <IconButton aria-label=\"expand row\" size=\"small\" onClick={(e) => this.setState(prevState => ({ open: !prevState.open }))}>\r\n                                    {this.state.open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n                                </IconButton> */}\r\n\r\n                                < OrganisatorInfo user={item} />\r\n                            </Box>\r\n\r\n                        )}\r\n\r\n                        {/* {!this.state.doneFollowers ? (<Skeleton variant=\"circle\" width=\"50px\" height=\"50px\" />) : (\r\n                                <OrganisatorInfo user={item} />\r\n                            )} */}\r\n\r\n\r\n                        {/* {!this.state.doneFollowers ? (<Skeleton variant=\"circle\" width=\"50px\" height=\"50px\" />) : (\r\n                                <a target=\"_blank\" rel=\"noopener noreferrer\" href={item.link}>\r\n                                    <img className=\"instaImage\" border=\"0\" alt=\"FollowImage\" src={item.avatar} width=\"100\" height=\"100\"></img>\r\n                                </a>\r\n                            )}\r\n                            {!this.state.doneFollowers ? (<Skeleton />) : (\r\n                                <b><a className=\"Loading-give-user\" target=\"_blank\" rel=\"noopener noreferrer\" href={item.link}>{item.username}</a> </b>\r\n                            )} */}\r\n\r\n                    </TableCell>\r\n                    {/* Текст раздачи */}\r\n                    {!this.state.doneFollowers ? (<Skeleton variant=\"rect\" width=\"100%\" height=\"80px\" />) : (\r\n                        <Tooltip title=\"Нажми  чтобы показать/скрыть спонсоров\" TransitionComponent={Fade} interactive arrow>\r\n                            <Box border={1} borderColor=\"primary.main\" borderRadius={16}  >\r\n\r\n                                <TableCell className=\"Loading-give-text\" onClick={clickCallback} >\r\n                                    <Box borderBottom={1}>\r\n                                        <Typography>{item.giveinfo}</Typography>\r\n                                    </Box>\r\n                                    <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n                                        <IconButton aria-label=\"expand row\" size=\"small\" onClick={(e) => this.setState(prevState => ({ open: !prevState.open }))}>\r\n                                            {this.state.open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n                                        </IconButton>\r\n                                        <StyledRating\r\n                                            name=\"customized-color\"\r\n                                            defaultValue={item.rating}\r\n                                            getLabelText={(value) => `${value} Heart${value !== 1 ? 's' : ''}`}\r\n                                            precision={0.5}\r\n                                            icon={<FavoriteIcon fontSize=\"inherit\" />} />\r\n                                    </Box>\r\n                                </TableCell>\r\n                            </Box>\r\n                        </Tooltip>\r\n                    )}\r\n                    {/* \r\n                        {!this.state.doneFollowers ? (<Skeleton variant=\"rect\" width=\"150px\" height=\"20px\" />) : (\r\n                            <TableCell>\r\n                                <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n                                    <StyledRating\r\n                                        name=\"customized-color\"\r\n                                        defaultValue={item.rating}\r\n                                        getLabelText={(value) => `${value} Heart${value !== 1 ? 's' : ''}`}\r\n                                        precision={0.5}\r\n                                        icon={<FavoriteIcon fontSize=\"inherit\" />} />\r\n                                </Box>\r\n                            </TableCell>\r\n                        )} */}\r\n\r\n                    {/* Рейтинг */}\r\n                    {/* <TableCell>\r\n                            <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n                                <StyledRating\r\n                                    name=\"customized-color\"\r\n                                    defaultValue={item.rating}\r\n                                    getLabelText={(value) => `${value} Heart${value !== 1 ? 's' : ''}`}\r\n                                    precision={0.5}\r\n                                    icon={<FavoriteIcon fontSize=\"inherit\" />}/>\r\n                            </Box>\r\n                        </TableCell> */}\r\n                </TableRow>\r\n\r\n            </React.Fragment >\r\n        ];\r\n\r\n        if (this.state.expandedRows.includes(item.id)) {\r\n            itemRows.push(\r\n                <FadeIn in={this.state.open}>\r\n                    {/* <Collapse  in={this.state.open} {...(this.state.open ? { timeout: 1000 } : {})} unmountOnExit> */}\r\n                    <TableRow key={\"row-expanded-\" + item.id}>\r\n                        <Box style={containerStyle} border={1} borderColor=\"grey.500\" borderRadius={1} >\r\n                            {/* <td>{item.followers}</td> */}\r\n                            {/* <th>Спонсоры:</th>  */}\r\n\r\n                            {/* <TableCell /> */}\r\n                            <Typography variant=\"h7\" gutterBottom component=\"div\" style={{ marginLeft: 5 }}>\r\n                                <AccountBalanceWalletIcon />Спонсоры:\r\n                        </Typography>\r\n\r\n                            {/* Должны получить имя организатора item.username - запрос к БД на получение фолловеров именно этого спонсора */}\r\n\r\n                            {/* NEW */}\r\n                            {/* {this.state.clickedUserFollowers.map(collumn => { //Проблема в том что 1 за раз отображает. Для каждого юзера придется свой список\r\n                            // if (item.username === collumn.usernameFollower)\r\n                            return (\r\n                                // Возможно несогласование ID\r\n                                <SponsorInfo follower={collumn} />\r\n\r\n                            );\r\n                        })} */}\r\n\r\n                            {/* OLD */}\r\n\r\n                            {/* <TableCell/> */}\r\n\r\n                            <div style={containerStyle}>\r\n                                {this.state.allJoin.map(collumn => {\r\n                                    if (item.username === collumn.username) //Collumn - alljoin\r\n                                        return (\r\n                                            <div style={itemStyle}>\r\n                                                {/* // Возможно несогласование ID */}\r\n                                                <SponsorInfo follower={collumn} />\r\n                                            </div>\r\n                                        );\r\n                                })}\r\n                            </div>\r\n                            {/* </TableCell> */}\r\n                        </Box>\r\n                    </TableRow>\r\n                    {/* </Collapse> */}\r\n                </FadeIn>\r\n            );\r\n        }\r\n\r\n        return itemRows;\r\n    }\r\n\r\n    render() {\r\n        // const classes = useRowStyles();\r\n        // const wrapperStyle = {\r\n        //     backgroundColor: \"#FFFFFF\",\r\n        //     flex: 1,\r\n        //     justifyContent: 'center',\r\n        //     alignItems: 'center',\r\n        // }\r\n\r\n        let allItemRows = [];\r\n        this.state.usersMain.map(item => {\r\n            const perItemRows = this.renderItem(item);\r\n            allItemRows = allItemRows.concat(perItemRows);\r\n            return allItemRows;\r\n        });\r\n\r\n        // Если show=1 -> показывать, иначе скрыть раздачу\r\n\r\n        return (\r\n\r\n\r\n            <section className=\"Loading-main\">\r\n\r\n                {/* <TableContainer component={Paper}>\r\n                    <Table aria-label=\"collapsible table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell />\r\n                                <TableCell>Организатор</TableCell>\r\n                                <TableCell align=\"right\">Раздача</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {rows.map((row) => (\r\n                                <Row key={row.id} row={row} />\r\n                            ))}\r\n\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer> */}\r\n\r\n                {/* <Typography variant=\"h5\">\r\n                    {!this.state.loading ? <Skeleton width=\"300px\" /> : 'Активные Giveaways:'}\r\n                </Typography> */}\r\n\r\n\r\n                <div><h4><PaymentIcon />Активные Giveaways: </h4></div>\r\n                <center>\r\n                    <>\r\n                        <TableContainer component={Paper}>\r\n                            <Table aria-label=\"collapsible table\" className=\"Giveaway-table\" size=\"small\" >\r\n                                {/* { условие ? (фолс):(тру) } */}\r\n                                {!this.state.done ? (<Skeleton variant=\"rect\" width=\"100%\" />) : (\r\n\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell>\r\n                                                {/* {!this.state.done ? (<Skeleton  width=\"100%\" />):( */}\r\n                                                <Typography> <MonetizationOnIcon /> Организатор</Typography>\r\n                                                {/* )} */}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <ChatIcon /> Инфо раздачи\r\n                                    </TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                )}\r\n                                <TableBody>\r\n                                    {!this.state.done ? (\r\n                                        <FadeIn>\r\n                                            <tr class=\"d-flex justify-content-center align-items-center\">\r\n\r\n                                                <td className=\"Loading-loadingText\"><h2>{this.state.randomLoadingText}</h2></td>\r\n                                                <td>{!this.state.loading ? (\r\n\r\n                                                    <Lottie options={defaultOptions} height={120} width={120} />\r\n\r\n                                                ) : (\r\n                                                        <Lottie options={defaultOptions2} height={120} width={120} />\r\n                                                    )} </td>\r\n                                            </tr>\r\n                                        </FadeIn>\r\n                                    ) : (allItemRows)}\r\n\r\n                                    {/* {!this.state.loading ? (<Skeleton variant=\"rect\" width=\"100%\" />) : (\r\n                                    allItemRows\r\n                                )} */}\r\n\r\n                                </TableBody>\r\n\r\n                                {/* <TableFooter>\r\n                                    <TableRow>\r\n                                        <TableCell>\r\n                                            <Typography> <MonetizationOnIcon /> Организатор</Typography>\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            <ChatIcon /> Инфо раздачи\r\n                                    </TableCell>\r\n                                    </TableRow>\r\n                                </TableFooter> */}\r\n\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </>\r\n\r\n                    {/* <table className=\"Giveaway-table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>\r\n                                    Организатор\r\n                       </th>\r\n                                <th>\r\n                                    Инфо раздачи\r\n                        </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {!this.state.done ? (\r\n                                <FadeIn>\r\n                                    <tr class=\"d-flex justify-content-center align-items-center\">\r\n                                        <td className=\"Loading-loadingText\"><h2>{this.state.randomLoadingText}</h2></td>\r\n                                        <td>{!this.state.loading ? (\r\n                                            <Lottie options={defaultOptions} height={120} width={120} />\r\n                                        ) : (\r\n                                                <Lottie options={defaultOptions2} height={120} width={120} />\r\n                                            )} </td>\r\n                                    </tr>\r\n                                </FadeIn>\r\n                            ) : (\r\n                                    allItemRows\r\n                                )}\r\n\r\n                        </tbody>\r\n\r\n                    </table> */}\r\n\r\n                </center>\r\n\r\n                <div>\r\n\r\n                    {/* <CardWrapper addEndCard={this.getEndCard.bind(this)}  style={wrapperStyle} >\r\n            \r\n            {this.renderCards()}\r\n          </CardWrapper> */}\r\n\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n    scrollToMyRef = () => window.scrollTo(0, this.tableRef.current.offsetTop);\r\n}","import React from 'react';\r\nimport './Home.css'\r\nimport Loading from \"./loading.js\";\r\n\r\nconst home = () => {\r\n    return (\r\n        <div className=\"Home-menu\">\r\n            {/* <h1>Insta-Give</h1> */}\r\n            <p>Сервис проверенных раздач в Instagram</p>\r\n            {/* Перенести сюда таблицу */}\r\n            <div>\r\n                <Loading />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default home;","import React from 'react';\r\n\r\nconst About = () => {\r\n   return (\r\n      <div>\r\n         <h1>О сервисе</h1>\r\n         <p>Вы можете участвовать в активных раздачах от реальных проверенных пользователей, подписавшись на спонсоров аккаунтов организаторов!</p>\r\n         <p>Первое, что стоит знать - это конкурс.<br></br>\r\n         ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\r\n         Как проходят наши гивы :<br></br>\r\n         - Блогер объявляет о старте конкурса для своих подписчиков, чтобы в нем участвовать, надо подписаться на всех спонсоров.<br></br>\r\n         ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\r\n         Таким образом, спонсоры платят за подписчиков, те, в свою очередь, выигрывают призы. Все счастливы.<br></br>\r\n         ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\r\n         У спонсоров есть около 10 дней (средняя длительность гива), чтобы заинтересовать аудиторию!<br></br>\r\n         ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\r\n         Будьте активны, чтобы гив прошёл для вас с максимальной пользой!🔥</p>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default About;","import React from 'react';\r\n \r\nconst Contact = () => {\r\n    return (\r\n       <div>\r\n          <h1>Обратная связь</h1>\r\n          <p>Contact US page body content</p>\r\n       </div>\r\n    );\r\n}\r\n \r\nexport default Contact;","import React from 'react';\r\n \r\nconst Error = () => {\r\n    return (\r\n       <div>\r\n          <p>Error: Page does not exist!</p>\r\n       </div>\r\n    );\r\n}\r\n \r\nexport default Error;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst styles = {\r\n  root: {\r\n    height: 18,\r\n    width: 18,\r\n    cursor: 'pointer',\r\n    border: 0,\r\n    background: 'none',\r\n    padding: 0,\r\n  },\r\n  dot: {\r\n    backgroundColor: '#e4e6e7',\r\n    height: 12,\r\n    width: 12,\r\n    borderRadius: 6,\r\n    margin: 3,\r\n  },\r\n  active: {\r\n    backgroundColor: '#319fd6',\r\n  },\r\n};\r\n\r\nclass PaginationDot extends React.Component {\r\n  handleClick = event => {\r\n    this.props.onClick(event, this.props.index);\r\n  };\r\n\r\n  render() {\r\n    const { active } = this.props;\r\n\r\n    let styleDot;\r\n\r\n    if (active) {\r\n      styleDot = Object.assign({}, styles.dot, styles.active);\r\n    } else {\r\n      styleDot = styles.dot;\r\n    }\r\n\r\n    return (\r\n      <button type=\"button\" style={styles.root} onClick={this.handleClick}>\r\n        <div style={styleDot} />\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nPaginationDot.propTypes = {\r\n  active: PropTypes.bool.isRequired,\r\n  index: PropTypes.number.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default PaginationDot;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PaginationDot from './PaginationDot';\r\n\r\nconst styles = {\r\n  root: {\r\n    position: 'absolute',\r\n    bottom: 8,\r\n    right: 8,\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n  },\r\n};\r\n\r\nclass Pagination extends React.Component {\r\n  handleClick = (event, index) => {\r\n    this.props.onChangeIndex(index);\r\n  };\r\n\r\n  render() {\r\n    const { index, dots } = this.props;\r\n\r\n    const children = [];\r\n\r\n    for (let i = 0; i < dots; i += 1) {\r\n      children.push(\r\n        <PaginationDot key={i} index={i} active={i === index} onClick={this.handleClick} />,\r\n      );\r\n    }\r\n\r\n    return <div style={styles.root}>{children}</div>;\r\n  }\r\n}\r\n\r\nPagination.propTypes = {\r\n  dots: PropTypes.number.isRequired,\r\n  index: PropTypes.number.isRequired,\r\n  onChangeIndex: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Pagination;","import React from 'react';\r\nimport './Navigation.css';\r\nimport { NavLink } from 'react-router-dom';\r\n// import Button from '@material-ui/core/Button';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\n// import MenuItem from '@material-ui/core/MenuItem';\r\n// import Select from '@material-ui/core/Select';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport { autoPlay } from 'react-swipeable-views-utils';\r\nimport Pagination from './Pagination';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\n// import LiveHelpIcon from '@material-ui/icons/LiveHelp';\r\n// import 'fontsource-roboto';\r\n\r\nconst AutoPlaySwipeableViews = autoPlay(SwipeableViews);\r\n\r\nconst stylesTab = {\r\n   root: {\r\n      position: 'relative',\r\n   },\r\n   tabs: {\r\n      // background: '#fff',\r\n\r\n   },\r\n   slide: {\r\n      padding: 15,\r\n      minHeight: 100,\r\n      // color: '#fff',\r\n   },\r\n   slide1: {\r\n      // backgroundColor: '#405DE6',\r\n      // color: 'black'\r\n   },\r\n   slide2: {\r\n      // backgroundColor: '#B3DC4A',\r\n      // color: 'black'\r\n   },\r\n   slide3: {\r\n      // backgroundColor: '#F77737',\r\n      // color: 'black'\r\n   },\r\n};\r\n\r\nclass Navigation extends React.Component {\r\n\r\n   state = {\r\n      index: 0,\r\n   };\r\n\r\n   handleChange = (event, value) => {\r\n      this.setState({\r\n         index: value,\r\n      });\r\n   };\r\n\r\n   handleChangeIndex = index => {\r\n      this.setState({\r\n         index,\r\n      });\r\n   };\r\n\r\n   render() {\r\n      const { index } = this.state;\r\n\r\n      // const Navigation = () => {\r\n      return (\r\n\r\n         <div className=\"Nav-text\">\r\n\r\n            <Tabs value={index} fullWidth onChange={this.handleChange} style={stylesTab.tabs}>\r\n               <NavLink to=\"/\"><HomeIcon /><Tab label=\"Главная\" /></NavLink>\r\n               <NavLink to=\"/about\"><InfoIcon /><Tab label=\"О сервисе\" /></NavLink>\r\n               <Tab label=\"FAQ\" />\r\n            </Tabs>\r\n\r\n            <AutoPlaySwipeableViews index={index} onChangeIndex={this.handleChangeIndex} >\r\n               {/* <div style={Object.assign({}, stylesTab.slide, stylesTab.slide1)}>slide n°1</div>\r\n         <div style={Object.assign({}, stylesTab.slide, stylesTab.slide2)}>slide n°2</div>\r\n         <div style={Object.assign({}, stylesTab.slide, stylesTab.slide3)}>slide n°3</div> */}\r\n               {/* <SwipeableViews index={index} onChangeIndex={this.handleChangeIndex}> */}\r\n               <div style={Object.assign({}, stylesTab.slide, stylesTab.slide1)}>\r\n                  <h3>Insta-give - аггрегатор новых giveaways</h3>\r\n               </div>\r\n               <div style={Object.assign({}, stylesTab.slide, stylesTab.slide2)}>\r\n                  <h3>О сервисе</h3>\r\n                  {/* <p>Чтобы сразу подписаться на аккаунты, необходимо авторизироваться в Инстаграм, нажав кнопку внизу страницы \"Войти через Instagram\"</p> */}\r\n                  <p>Первое, что стоит знать - это конкурс.<br></br>⠀⠀⠀⠀⠀⠀</p>⠀⠀⠀⠀⠀⠀⠀\r\n                  {/* <Select value={10} autoWidth={false}>\r\n              <MenuItem value=\"\">\r\n                <em>None</em>\r\n              </MenuItem>\r\n              <MenuItem value={10}>Ten</MenuItem>\r\n            </Select> */}\r\n               </div>\r\n               <div style={Object.assign({}, stylesTab.slide, stylesTab.slide3)}>Добавляете инфо о раздаче в Instagram с помощью меню <NavLink to=\"/offer\"><Tab label=\"Организаторам\" /></NavLink></div>\r\n               {/* </SwipeableViews> */}\r\n            </AutoPlaySwipeableViews>\r\n            <Pagination dots={3} index={index} onChangeIndex={this.handleChangeIndex} />\r\n\r\n            {/* Ссылки на другие страницы */}\r\n            {/* <b className=\"Nav-text\"><NavLink to=\"/\">Главная</NavLink></b>\r\n            <span className=\"Nav-text\"><NavLink to=\"/about\">О сервисе</NavLink> </span> */}\r\n            {/* <NavLink to=\"/contact\">Contact</NavLink> */}\r\n\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\n \r\nconst Agreement = () => {\r\n    return (\r\n       <div>\r\n          <h1>Agreement</h1>\r\n          <p>Пользовательское соглашение</p>\r\n          <p>\r\n          Пользовательское соглашение\r\n\r\nНастоящее Соглашение определяет условия использования Пользователями материалов и сервисов сайта https://insta-give.herokuapp.com/(далее — «Сайт»).\r\n\r\n1.Общие условия\r\n\r\n1.1. Использование материалов и сервисов Сайта регулируется нормами действующего законодательства Российской Федерации.\r\n\r\n1.2. Настоящее Соглашение является публичной офертой. Получая доступ к материалам Сайта Пользователь считается присоединившимся к настоящему Соглашению.\r\n\r\n1.3. Администрация Сайта вправе в любое время в одностороннем порядке изменять условия настоящего Соглашения. Такие изменения вступают в силу по истечении 3 (Трех) дней с момента размещения новой версии Соглашения на сайте. При несогласии Пользователя с внесенными изменениями он обязан отказаться от доступа к Сайту, прекратить использование материалов и сервисов Сайта.\r\n\r\n2. Обязательства Пользователя\r\n\r\n2.1. Пользователь соглашается не предпринимать действий, которые могут рассматриваться как нарушающие российское законодательство или нормы международного права, в том числе в сфере интеллектуальной собственности, авторских и/или смежных правах, а также любых действий, которые приводят или могут привести к нарушению нормальной работы Сайта и сервисов Сайта.\r\n\r\n2.2. Использование материалов Сайта без согласия правообладателей не допускается (статья 1270 Г.К РФ). Для правомерного использования материалов Сайта необходимо заключение лицензионных договоров (получение лицензий) от Правообладателей.\r\n\r\n2.3. При цитировании материалов Сайта, включая охраняемые авторские произведения, ссылка на Сайт обязательна (подпункт 1 пункта 1 статьи 1274 Г.К РФ).\r\n\r\n2.4. Комментарии и иные записи Пользователя на Сайте не должны вступать в противоречие с требованиями законодательства Российской Федерации и общепринятых норм морали и нравственности.\r\n\r\n2.5. Пользователь предупрежден о том, что Администрация Сайта не несет ответственности за посещение и использование им внешних ресурсов, ссылки на которые могут содержаться на сайте.\r\n\r\n2.6. Пользователь согласен с тем, что Администрация Сайта не несет ответственности и не имеет прямых или косвенных обязательств перед Пользователем в связи с любыми возможными или возникшими потерями или убытками, связанными с любым содержанием Сайта, регистрацией авторских прав и сведениями о такой регистрации, товарами или услугами, доступными на или полученными через внешние сайты или ресурсы либо иные контакты Пользователя, в которые он вступил, используя размещенную на Сайте информацию или ссылки на внешние ресурсы.\r\n\r\n2.7. Пользователь принимает положение о том, что все материалы и сервисы Сайта или любая их часть могут сопровождаться рекламой. Пользователь согласен с тем, что Администрация Сайта не несет какой-либо ответственности и не имеет каких-либо обязательств в связи с такой рекламой.\r\n\r\n3. Прочие условия\r\n\r\n3.1. Все возможные споры, вытекающие из настоящего Соглашения или связанные с ним, подлежат разрешению в соответствии с действующим законодательством Российской Федерации.\r\n\r\n3.2. Ничто в Соглашении не может пониматься как установление между Пользователем и Администрации Сайта агентских отношений, отношений товарищества, отношений по совместной деятельности, отношений личного найма, либо каких-то иных отношений, прямо не предусмотренных Соглашением.\r\n\r\n3.3. Признание судом какого-либо положения Соглашения недействительным или не подлежащим принудительному исполнению не влечет недействительности иных положений Соглашения.\r\n\r\n3.4. Бездействие со стороны Администрации Сайта в случае нарушения кем-либо из Пользователей положений Соглашения не лишает Администрацию Сайта права предпринять позднее соответствующие действия в защиту своих интересов и защиту авторских прав на охраняемые в соответствии с законодательством материалы Сайта.\r\n\r\nПользователь подтверждает, что ознакомлен со всеми пунктами настоящего Соглашения и безусловно принимает их.\r\n          </p>\r\n       </div>\r\n    );\r\n}\r\n \r\nexport default Agreement;","import React from 'react';\r\n \r\nconst Privacy = () => {\r\n    return (\r\n       <div >\r\n          <h1>Privacy</h1>\r\n          <p>Политика конфиденциальности</p>\r\n          <p>\r\n          Политика в отношении обработки персональных данных\r\n<p>1. Общие положения</p>\r\nНастоящая политика обработки персональных данных составлена в соответствии с требованиями Федерального закона от 27.07.2006. №152-ФЗ «О персональных данных» и определяет порядок обработки персональных данных и меры по обеспечению безопасности персональных данных, предпринимаемые ООО \"Инстаграмм решения раздачи\" (далее – Оператор).\r\n1.1. Оператор ставит своей важнейшей целью и условием осуществления своей деятельности соблюдение прав и свобод человека и гражданина при обработке его персональных данных, в том числе защиты прав на неприкосновенность частной жизни, личную и семейную тайну.\r\n1.2. Настоящая политика Оператора в отношении обработки персональных данных (далее – Политика) применяется ко всей информации, которую Оператор может получить о посетителях веб-сайта http://insta-give.herokuapp.com/.\r\n \r\n<p>2. Основные понятия, используемые в Политике</p>\r\n2.1. Автоматизированная обработка персональных данных – обработка персональных данных с помощью средств вычислительной техники;\r\n2.2. Блокирование персональных данных – временное прекращение обработки персональных данных (за исключением случаев, если обработка необходима для уточнения персональных данных);\r\n2.3. Веб-сайт – совокупность графических и информационных материалов, а также программ для ЭВМ и баз данных, обеспечивающих их доступность в сети интернет по сетевому адресу http://insta-give.herokuapp.com/;\r\n2.4. Информационная система персональных данных — совокупность содержащихся в базах данных персональных данных, и обеспечивающих их обработку информационных технологий и технических средств;\r\n2.5. Обезличивание персональных данных — действия, в результате которых невозможно определить без использования дополнительной информации принадлежность персональных данных конкретному Пользователю или иному субъекту персональных данных;\r\n2.6. Обработка персональных данных – любое действие (операция) или совокупность действий (операций), совершаемых с использованием средств автоматизации или без использования таких средств с персональными данными, включая сбор, запись, систематизацию, накопление, хранение, уточнение (обновление, изменение), извлечение, использование, передачу (распространение, предоставление, доступ), обезличивание, блокирование, удаление, уничтожение персональных данных;\r\n2.7. Оператор – государственный орган, муниципальный орган, юридическое или физическое лицо, самостоятельно или совместно с другими лицами организующие и (или) осуществляющие обработку персональных данных, а также определяющие цели обработки персональных данных, состав персональных данных, подлежащих обработке, действия (операции), совершаемые с персональными данными;\r\n2.8. Персональные данные – любая информация, относящаяся прямо или косвенно к определенному или определяемому Пользователю веб-сайта http://insta-give.herokuapp.com/;\r\n2.9. Пользователь – любой посетитель веб-сайта http://insta-give.herokuapp.com/;\r\n2.10. Предоставление персональных данных – действия, направленные на раскрытие персональных данных определенному лицу или определенному кругу лиц;\r\n2.11. Распространение персональных данных – любые действия, направленные на раскрытие персональных данных неопределенному кругу лиц (передача персональных данных) или на ознакомление с персональными данными неограниченного круга лиц, в том числе обнародование персональных данных в средствах массовой информации, размещение в информационно-телекоммуникационных сетях или предоставление доступа к персональным данным каким-либо иным способом;\r\n2.12. Трансграничная передача персональных данных – передача персональных данных на территорию иностранного государства органу власти иностранного государства, иностранному физическому или иностранному юридическому лицу;\r\n2.13. Уничтожение персональных данных – любые действия, в результате которых персональные данные уничтожаются безвозвратно с невозможностью дальнейшего восстановления содержания персональных данных в информационной системе персональных данных и (или) уничтожаются материальные носители персональных данных.\r\n \r\n3. Оператор может обрабатывать следующие персональные данные Пользователя\r\n3.1. Подписчики инстаграм;\r\n3.2. Также на сайте происходит сбор и обработка обезличенных данных о посетителях (в т.ч. файлов «cookie») с помощью сервисов интернет-статистики (Яндекс Метрика и Гугл Аналитика и других).\r\n3.3. Вышеперечисленные данные далее по тексту Политики объединены общим понятием Персональные данные.\r\n \r\n4. Цели обработки персональных данных\r\n4.1. Цель обработки персональных данных Пользователя — предоставление доступа Пользователю к сервисам, информации и/или материалам, содержащимся на веб-сайте.\r\n4.2. Также Оператор имеет право направлять Пользователю уведомления о новых продуктах и услугах, специальных предложениях и различных событиях. Пользователь всегда может отказаться от получения информационных сообщений, направив Оператору письмо на адрес электронной почты Ya.nowaday@yandex.ru с пометкой «Отказ от уведомлений о новых продуктах и услугах и специальных предложениях».\r\n4.3. Обезличенные данные Пользователей, собираемые с помощью сервисов интернет-статистики, служат для сбора информации о действиях Пользователей на сайте, улучшения качества сайта и его содержания.\r\n \r\n5. Правовые основания обработки персональных данных\r\n5.1. Оператор обрабатывает персональные данные Пользователя только в случае их заполнения и/или отправки Пользователем самостоятельно через специальные формы, расположенные на сайте http://insta-give.herokuapp.com/. Заполняя соответствующие формы и/или отправляя свои персональные данные Оператору, Пользователь выражает свое согласие с данной Политикой.\r\n5.2. Оператор обрабатывает обезличенные данные о Пользователе в случае, если это разрешено в настройках браузера Пользователя (включено сохранение файлов «cookie» и использование технологии JavaScript).\r\n \r\n6. Порядок сбора, хранения, передачи и других видов обработки персональных данных\r\nБезопасность персональных данных, которые обрабатываются Оператором, обеспечивается путем реализации правовых, организационных и технических мер, необходимых для выполнения в полном объеме требований действующего законодательства в области защиты персональных данных.\r\n6.1. Оператор обеспечивает сохранность персональных данных и принимает все возможные меры, исключающие доступ к персональным данным неуполномоченных лиц.\r\n6.2. Персональные данные Пользователя никогда, ни при каких условиях не будут переданы третьим лицам, за исключением случаев, связанных с исполнением действующего законодательства.\r\n6.3. В случае выявления неточностей в персональных данных, Пользователь может актуализировать их самостоятельно, путем направления Оператору уведомление на адрес электронной почты Оператора Ya.nowaday@yandex.ru с пометкой «Актуализация персональных данных».\r\n6.4. Срок обработки персональных данных является неограниченным. Пользователь может в любой момент отозвать свое согласие на обработку персональных данных, направив Оператору уведомление посредством электронной почты на электронный адрес Оператора Ya.nowaday@yandex.ru с пометкой «Отзыв согласия на обработку персональных данных».\r\n \r\n7. Трансграничная передача персональных данных\r\n7.1. Оператор до начала осуществления трансграничной передачи персональных данных обязан убедиться в том, что иностранным государством, на территорию которого предполагается осуществлять передачу персональных данных, обеспечивается надежная защита прав субъектов персональных данных.\r\n7.2. Трансграничная передача персональных данных на территории иностранных государств, не отвечающих вышеуказанным требованиям, может осуществляться только в случае наличия согласия в письменной форме субъекта персональных данных на трансграничную передачу его персональных данных и/или исполнения договора, стороной которого является субъект персональных данных.\r\n \r\n8. Заключительные положения\r\n8.1. Пользователь может получить любые разъяснения по интересующим вопросам, касающимся обработки его персональных данных, обратившись к Оператору с помощью электронной почты Ya.nowaday@yandex.ru.\r\n8.2. В данном документе будут отражены любые изменения политики обработки персональных данных Оператором. Политика действует бессрочно до замены ее новой версией.\r\n8.3. Актуальная версия Политики в свободном доступе расположена в сети Интернет по адресу http://insta-give.herokuapp.com/privacy/.\r\n          </p>\r\n       </div>\r\n    );\r\n}\r\n \r\nexport default Privacy;","import React, { Component } from 'react';\r\n// import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nconst apilink = \"http://api.instagive.ga/\";\r\n\r\nclass Offer extends Component {\r\n    // const Offer = () => {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            offerUserName: '',\r\n            offerUserGiveinfo: '',\r\n            offerUserAvatar: '',\r\n        };\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        // this.handleInputNicknameChange = this.handleInputNicknameChange(this);\r\n        // this.handleInputAvatarChange = this.handleInputAvatarChange(this);\r\n    }\r\n\r\n    handleInputChange = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n\r\n    // //Allow only English Letters in Nickname\r\n    // handleInputNicknameChange = e => {\r\n    //     var value = e.target.value;\r\n\r\n    //     value = value.replace(/[^A-Za-z]/ig, '');\r\n\r\n    //     this.setState({\r\n    //         [e.target.name]: value,\r\n    //     })\r\n\r\n    // };\r\n\r\n    // handleInputAvatarChange = e => {\r\n    //     var value = e.target.value\r\n\r\n    //     value = value.replace(/[^A-Za-z]/ig, '')\r\n\r\n    //     this.setState({\r\n    //         [e.target.name]: value,\r\n    //     })\r\n    // };\r\n\r\n    handleSubmit = e => {\r\n        if (!e.target.checkValidity()) {\r\n            // form is invalid! so we do nothing\r\n            return;\r\n        }\r\n        e.preventDefault();\r\n\r\n        const { offerUserName, offerUserGiveinfo, offerUserAvatar } = this.state;\r\n\r\n        const offer = {\r\n            offerUserName,\r\n            offerUserGiveinfo,\r\n            offerUserAvatar,\r\n        };\r\n\r\n        //\r\n        if (window.confirm('Отправить предложенную раздачу? Введенные данные верны?\\nНикнейм: ' + offerUserName + '\\nИнфо: ' + offerUserGiveinfo)) {\r\n            //Show Message Success\r\n            alert('Спасибо, мы рассмотрим её в ближайшее время и возможно добавим на сайт!');\r\n            axios\r\n                .post(apilink + 'offer', offer)\r\n                .then(() => {\r\n                    console.log('Offer Created');\r\n                    //Clear values\r\n                    this.setState({\r\n                        offerUserName: '',\r\n                        offerUserGiveinfo: '',\r\n                        offerUserAvatar: '',\r\n                    });\r\n                    //Clear Form Data\r\n                    document.getElementById(\"offer-form\").reset();\r\n                    //Go To Main Page\r\n                    window.location.href = '/';\r\n\r\n                })\r\n                .catch(err => {\r\n                    console.error(err);\r\n                    //Show Message \r\n                    alert('Что-то пошло не так, технические неполадки с базой данных...');\r\n                });\r\n        } else {\r\n            // alert('Отмена... Зачем тогда предлагать? Определись уже!!!');\r\n        }\r\n\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Предложить раздачу</h1>\r\n                {/* <p>Contact US page body content</p> */}\r\n                <h6>Аккаунт должен быть ОТКРЫТЫЙ</h6><br></br>\r\n                {/* <form method=\"POST\">\r\n                    <label>Никнейм *:</label><br></br>\r\n                    <input type=\"text\" name=\"offerUserName\" class=\"field\" required=\"required\" /><br></br>\r\n                    <label>Инфо раздачи *:</label><br></br>\r\n                    <textarea name=\"offerUserGiveinfo\" rows=\"15\" cols=\"40\" required=\"required\" class=\"give-textarea\"></textarea><br></br>\r\n                    <label>Прямая ссылка на аватар (не обязательно):</label><br></br>\r\n                    <input type=\"url\" name=\"offerUserAvatar\" class=\"field\" /><br></br><br></br>\r\n                    <input type=\"submit\" value=\"Предложить\" /><br></br><br></br>\r\n                </form>\r\n                <p>После нажатия на кнопку \"Предложить\" Ваша раздача будет рассмотрена модераторами.</p> */}\r\n\r\n                <center>\r\n                    <form id='offer-form' onSubmit={this.handleSubmit}>\r\n                        {/* <div style={{ width: '30%' }} className=\"form-group\"> */}\r\n                        <div style={{ width: '60%' }} className=\"form-group\">\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                name=\"offerUserName\"\r\n                                placeholder=\"Никнейм *\"\r\n                                onChange={this.handleInputChange}\r\n                                required=\"required\"\r\n                            />\r\n                        </div>\r\n                        <br />\r\n                        <div style={{ width: '60%' }} className=\"form-group\">\r\n                            {/* <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            name=\"offerUserGiveinfo\"\r\n                            placeholder=\"Инфо раздачи *\"\r\n                            onChange={this.handleInputChange}\r\n                        /> */}\r\n                            <textarea\r\n                                name=\"offerUserGiveinfo\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Инфо раздачи *\"\r\n                                onChange={this.handleInputChange}\r\n                                rows=\"15\"\r\n                                cols=\"40\"\r\n                                required=\"required\"\r\n                            >\r\n                            </textarea>\r\n                        </div>\r\n                        <br />\r\n                        {/* <div style={{ width: '60%' }} className=\"form-group\">\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                name=\"offerUserAvatar\"\r\n                                placeholder=\"Прямая ссылка на аватар\"\r\n                                onChange={this.handleInputChange}\r\n                            />\r\n                        </div>\r\n                        <br /> */}\r\n                        <div style={{ width: '60%' }}>\r\n                            {/* Сделать успешное сообщение */}\r\n                            <button className=\"btn btn-success\" type=\"submit\" >\r\n                                {/* onClick={event => window.location.href = '/'} */}\r\n                                {/* {() => { if (window.confirm('Are you sure you wish to delete this item?') window.location.href = '/' ) this.onCancel(item) } } */}\r\n                                Предложить\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n\r\n                </center>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Offer;","// import React, { Component, Table, Fragment, useState, Suspense, lazy } from 'react';\r\nimport React, { Component, Suspense } from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\n// import Post from './components/Post';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n// import { Card, CardWrapper } from 'react-swipeable-cards';\r\nimport styled from \"styled-components\";\r\n// import { useTable, useSortBy } from \"react-table\";\r\n\r\n// import InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport InstagramLogin from 'react-instagram-login';\r\n// import ReactDOM from 'react-dom';\r\n//Multi-pages\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n\r\n\r\n// import FooterContent from './components/FooterContent';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\n// import BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\n// import RestoreIcon from '@material-ui/icons/Restore';\r\n// import FavoriteIcon from '@material-ui/icons/Favorite';\r\n// import LocationOnIcon from '@material-ui/icons/LocationOn';\r\n// import 'fontsource-roboto';\r\n\r\n// import useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\n// import ThemeSwitch from './components/ThemeSwitch'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switcher from '@material-ui/core/Switch';\r\n// import { lightTheme, darkTheme } from './theme';\r\nimport MiniMenu from './components/miniDrawer';\r\n\r\nimport {\r\n  // AppBar,\r\n  CssBaseline,\r\n  Typography,\r\n  createMuiTheme\r\n} from \"@material-ui/core\";\r\n\r\n//ROUTES\r\nimport Home from './components/Home';\r\nimport About from './components/About';\r\nimport Contact from './components/Contact';\r\nimport Error from './components/Error';\r\nimport Navigation from './components/Navigation';\r\nimport Agreement from './components/Agreement';\r\nimport Privacy from './components/Privacy';\r\nimport Offer from './components/Offer';\r\n// //FUCK GG Theme not change in all elements нужно через CONTEXT\r\n// const Home = lazy(()=>import('./components/Home'));\r\n// const About = lazy(()=>import( './components/About'));\r\n// const Contact = lazy(()=>import( './components/Contact'));\r\n// const Error = lazy(()=>import( './components/Error'));\r\n// const Navigation = lazy(()=>import( './components/Navigation'));\r\n// const Agreement = lazy(()=>import( './components/Agreement'));\r\n// const Privacy = lazy(()=>import( './components/Privacy'));\r\nconst apilink = \"http://api.instagive.ga/\";\r\n\r\nconst themeLight = createMuiTheme({\r\n  palette: {\r\n    type: \"light\"\r\n  }\r\n});\r\nconst themeDark = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\"\r\n  }\r\n});\r\n// const theme1 = createMuiTheme(lightTheme);\r\n// const theme2 = createMuiTheme(darkTheme)\r\n// const ThemeContext = React.createContext('light');\r\n\r\n// function AutoTheme(){\r\n// const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\r\n\r\n// const theme = React.useMemo(\r\n//   () =>\r\n//     createMuiTheme({\r\n//       palette: {\r\n//         type: prefersDarkMode ? 'dark' : 'light',\r\n//       },\r\n//     }),\r\n//   [prefersDarkMode],\r\n// );\r\n// return theme;\r\n//   }\r\n\r\n// function getTheme(theme) {\r\n//   return createMuiTheme({\r\n//     palette: {\r\n//       type: theme.paletteType,\r\n//       background: {\r\n//         default: theme.paletteType === 'light' ? 'light' : 'dark',\r\n//       },\r\n//     },\r\n//   });\r\n// }\r\n// const theme = getTheme({\r\n//   paletteType: 'light',\r\n// });\r\n\r\n// import Loading from \"./loading.js\";\r\n\r\n// // Create custom end card\r\n// class MyEndCard extends Component {\r\n//   render() {\r\n//     return (\r\n//       <div>Больше нет раздач!</div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// function App() {\r\n//   const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\r\n\r\n//   const theme = React.useMemo(\r\n//     () =>\r\n//       createMuiTheme({\r\n//         palette: {\r\n//           type: prefersDarkMode ? 'dark' : 'light',\r\n//         },\r\n//       }),\r\n//     [prefersDarkMode],\r\n//   );\r\n\r\n//   return (\r\n//     <ThemeProvider theme={theme}>\r\n//       <CssBaseline/>\r\n//       <Routes />\r\n//     </ThemeProvider>\r\n//   );\r\n// }\r\n\r\n// function Toolbar(props){\r\n//   return(\r\n//     <FormControlLabel\r\n//     control={\r\n//       <Switcher\r\n//         checked={props.isThemeLight}\r\n//         onChange={props.onThemeChange}\r\n//         name=\"checkedB\"\r\n//         color=\"primary\"\r\n//       />\r\n//     }\r\n//     label={props.isThemeLight ? \"Светлая тема\" : \"Темная тема\"}\r\n//   />\r\n//   )\r\n// }\r\n\r\nclass App extends Component {\r\n  //state ={users: []}\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      usersMain: [],\r\n      childVisible: false,\r\n      //followers: [],\r\n      allJoin: [],\r\n      // cards: cards,\r\n      // outOfCards: false\r\n      expandedRows: [],\r\n      accessToken: '',\r\n      // isToggleOn: true //ПОдписка\r\n      navitem: undefined,\r\n      setNav: undefined,\r\n      isThemeLight: true,\r\n\r\n      // offerUserName: '',\r\n      // offerUserGiveinfo: '',\r\n      // offerUserAvatar: '',\r\n    };\r\n    this.onClickMainUser = this.onClickMainUser.bind(this);\r\n    // this.onThemeChange = this.onThemeChange.bind(this);\r\n  }\r\n  state = {\r\n    // isThemeLight: false\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n  }\r\n  componentWillUnmount() {\r\n\r\n  }\r\n\r\n  onThemeChange = () => {\r\n    // this.setState({\r\n    //   isThemeLight: !this.state.isThemeLight\r\n    // });\r\n    this.setState(prevState => ({ isThemeLight: !prevState.isThemeLight }));\r\n  }\r\n  // async componentDidMount() {\r\n  //   //this.getUsers();\r\n\r\n  //   //Subscribtion MAIN accs\r\n  //   let self = this;\r\n  //   await fetch('mainusers', {\r\n  //     method: 'GET'\r\n  //   }).then(function (response) {\r\n  //     if (response.status >= 400) {\r\n  //       throw new Error(\"Bad response from server\");\r\n  //     }\r\n  //     return response.json();\r\n  //   }).then(function (data) {\r\n  //     self.setState({ usersMain: data });\r\n  //   }).catch(err => {\r\n  //     console.log('caught it!', err);\r\n  //   })\r\n\r\n  //   // await fetch('/follow', {\r\n  //   //   method: 'GET'\r\n  //   // }).then(function (response) {\r\n  //   //   if (response.status >= 400) {\r\n  //   //     throw new Error(\"Bad response from server\");\r\n  //   //   }\r\n  //   //   return response.json();\r\n  //   // }).then(function (data) {\r\n  //   //   self.setState({ followers: data });\r\n  //   // }).catch(err => {\r\n  //   //   console.log('caught it!', err);\r\n  //   // })\r\n\r\n  //   await fetch('/alljoin', {\r\n  //     method: 'GET'\r\n  //   }).then(function (response) {\r\n  //     if (response.status >= 400) {\r\n  //       throw new Error(\"Bad response from server\");\r\n  //     }\r\n  //     return response.json();\r\n  //   }).then(function (data) {\r\n  //     self.setState({ allJoin: data });\r\n  //   }).catch(err => {\r\n  //     console.log('caught it!', err);\r\n  //   })\r\n\r\n  // }\r\n\r\n  fetchMoreData = () => {\r\n    // a fake async api call like which sends\r\n    // 20 more records in 1.5 secs\r\n    setTimeout(() => {\r\n      this.setState({\r\n        //usersMain: this.state.usersMain.concat(Array.from({ length: 20 }))\r\n      });\r\n    }, 1500);\r\n  };\r\n\r\n  // //Cards\r\n  // onSwipe(data) {\r\n  //   console.log(data.name + \" was swiped.\");\r\n  //   //showPost\r\n  //   //\r\n  //   //this.setState(prevState => ({ childVisible: !prevState.childVisible }));\r\n  // }\r\n\r\n  // onSwipeLeft(data) {\r\n  //   console.log(\"Свайп влево!\");\r\n  // }\r\n\r\n  // onSwipeRight(data) {\r\n  //   console.log(\"Свайп вправо!\");\r\n  // }\r\n\r\n  // onDoubleTap(data) {\r\n  //   console.log(data.name + \"Даблклик!\");\r\n\r\n  //   //show users in page after card\r\n  //   this.setState(prevState => ({ childVisible: !prevState.childVisible }));\r\n  // }\r\n\r\n  // renderCards() {\r\n  //   const cardStyle = {\r\n  //     //backgroundColor: \"#059FFF\"\r\n  //     backgroundColor: \"#FFFFFF\",\r\n  //     alignItems: 'center',\r\n  //     borderRadius: 5,\r\n  //     overflow: 'hidden',\r\n  //     borderColor: 'grey',\r\n  //     backgroundColor: 'white',\r\n  //     borderWidth: 1,\r\n  //     elevation: 1,\r\n  //   }\r\n  //   let data = [{ id: 1, name: \"Аккаунт 1\", avatar: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQxaWhMtrjqRIgh4JYLB0oDIGBU5hBIpT1QIO9y0C3-uoWrhD5h&usqp=CAU\", info: \"Раздача началась 💰Сделаю 5 стопа 🛑 по 5000 тр. Чем больше комментов, тем больше шансов выиграть бабло 🤑Обязательно должен быть подписанным на мою страницу\" },\r\n  //   { id: 2, name: \"Аккаунт 2\", avatar: \"https://scontent-hel2-1.cdninstagram.com/v/t51.2885-15/e35/s1080x1080/81640348_596430880914216_5009838966112953440_n.jpg?_nc_ht=scontent-hel2-1.cdninstagram.com&_nc_cat=100&_nc_ohc=PKa9EzwGwGcAX8v7ini&oh=ff91862943213f43df3843666c3188e4&oe=5EFD611F\", info: \"Условия раздачи 2\" },\r\n  //   { id: 3, name: \"Аккаунт 3\", avatar: \"https://rubic.us/wp-content/uploads/2017/05/rich.jpg\", info: \"Условие раздачи 3\" }];\r\n  //   return data.map((d) => {\r\n  //     return (\r\n  //       <Card style={cardStyle}\r\n  //         key={d.id}\r\n  //         //onSwipe={this.onSwipe.bind(this)}\r\n  //         // onSwipeLeft={this.onSwipeLeft.bind(this)}\r\n  //         // onSwipeRight={this.onSwipeRight.bind(this)}\r\n  //         onDoubleTap={this.onDoubleTap.bind(this)}\r\n  //         data={d}>\r\n  //         <div className=\"App-card\">\r\n  //           <img className=\"App-giveaway-avatar\" alt=\"Giveaway user avatar\" src={d.avatar}></img>\r\n  //           <b className=\"App-give-text\">{d.name}:</b>\r\n\r\n  //           <span className=\"App-give-text\">{d.info}</span>\r\n  //         </div>\r\n\r\n  //       </Card>\r\n  //     );\r\n  //   });\r\n\r\n  // }\r\n\r\n  // getEndCard() {\r\n  //   return (\r\n  //     <MyEndCard />\r\n  //   );\r\n  // }\r\n\r\n  onClickMainUser(data) {\r\n    this.setState(prevState => ({ childVisible: !prevState.childVisible }));\r\n  }\r\n\r\n  // componentDidCatch(error, info) {\r\n  //   // Пример \"componentStack\":\r\n  //   //   in ComponentThatThrows (created by App)\r\n  //   //   in ErrorBoundary (created by App)\r\n  //   //   in div (created by App)\r\n  //   //   in App\r\n  //   logComponentStackToMyService(info.componentStack);\r\n  // }\r\n\r\n  // handleMouseEnter = (e) => {\r\n  //   this.setState({\r\n  //     left: e.target.getBoundingClientRect().x - 4,\r\n  //   });\r\n  //   //e.target.style. = 'purple';\r\n  //   e.target.borderWidth = 2;\r\n  // }\r\n  // handleMouseLeave = (e) => {\r\n  //   //e.target.style.background = 'white';\r\n  //   e.target.borderWidth = 2;\r\n  // }\r\n\r\n  // handleButtonClick() {\r\n  //   this.setState(state => ({\r\n  //     isToggleOn: !state.isToggleOn\r\n  //   }));\r\n  // }\r\n\r\n  // handleRowClick(rowId) {\r\n  //   const currentExpandedRows = this.state.expandedRows;\r\n  //   const isRowCurrentlyExpanded = currentExpandedRows.includes(rowId);\r\n\r\n  //   const newExpandedRows = isRowCurrentlyExpanded ?\r\n  //     currentExpandedRows.filter(id => id !== rowId) :\r\n  //     currentExpandedRows.concat(rowId);\r\n\r\n  //   this.setState({ expandedRows: newExpandedRows });\r\n  // }\r\n\r\n  // renderItem(item) {\r\n  //   const clickCallback = () => this.handleRowClick(item.id);\r\n\r\n  //   const itemRows = [\r\n  //     <tr onClick={clickCallback} onMouseEnter={this.handleMouseEnter} onMouseLeave={this.handleMouseLeave} key={\"row-data-\" + item.id}>\r\n  //       <td>\r\n  //         <a target=\"_blank\" rel=\"noopener noreferrer\" href={item.link}>\r\n  //           <img className=\"instaImage\" border=\"0\" alt=\"FollowImage\" src={item.avatar} width=\"100\" height=\"100\"></img>\r\n  //         </a>\r\n\r\n\r\n  //         <b><a className=\"App-give-user\" target=\"_blank\" rel=\"noopener noreferrer\" href={item.link}>{item.username}</a> </b>\r\n  //       </td>\r\n  //       <td className=\"App-give-text\">{item.giveinfo}</td>\r\n  //     </tr>\r\n  //   ];\r\n\r\n  //   //Followers\r\n  //   if (this.state.expandedRows.includes(item.id)) {\r\n  //     itemRows.push(\r\n  //       <tr key={\"row-expanded-\" + item.id}>\r\n  //         {/* <td>{item.followers}</td> */}\r\n  //         Спонсоры:\r\n\r\n  //         {this.state.allJoin.map(collumn => {\r\n  //           if (item.username == collumn.username) //Collumn - alljoin\r\n  //             return (\r\n  //               <tr key={collumn.id}>\r\n  //                 <td className=\"paddingRow\">>\r\n  //                 <a target=\"_blank\" rel=\"noopener noreferrer\" href={collumn.linkFollower}>\r\n  //                     <img className=\"instaImage\" border=\"0\" alt=\"FollowImage\" src={collumn.avatarFollower} width=\"100\" height=\"100\"></img>\r\n  //                   </a>\r\n  //                   <a className=\"App-give-text\" target=\"_blank\" rel=\"noopener noreferrer\" href={collumn.linkFollower}>{collumn.usernameFollower}</a>\r\n  //                 </td>\r\n  //                 <td>\r\n  //                 <a align=\"right\" target=\"_blank\" rel=\"noopener noreferrer\" onClick={this.handleButtonClick} href={collumn.linkFollower} class=\"btn btn-primary\">Подпишись</a> \r\n  //                 {/* <a align=\"right\" target=\"_blank\" rel=\"noopener noreferrer\" onClick={this.handleButtonClick} href={\"https://www.instagram.com/web/friendships/\"+ collumn.useridFollower + \"/follow/\"} class=\"btn btn-primary\">Подпишись</a> */}\r\n  //                   {/* <a align=\"right\" target=\"_blank\" rel=\"noopener noreferrer\" onClick={this.handleButtonClick} href={\"https://www.instagram.com/web/friendships/\"+ collumn.useridFollower + this.state.isToggleOn ? '/follow/' : '/unfollow/'} class=\"btn btn-primary\"> {this.state.isToggleOn ? 'Подпишись' : 'Отписаться'}</a> */}\r\n  //                 </td>\r\n  //               </tr>);\r\n  //         })}\r\n  //       </tr>\r\n  //     );\r\n  //   }\r\n\r\n  //   return itemRows;\r\n  // }\r\n\r\n\r\n  render() {\r\n\r\n    // const [theme, setTheme] = useState('light');\r\n\r\n    // const toggleTheme = () => {\r\n    //   // getTheme()\r\n    //   if (theme.paletteType === 'light') {\r\n    //      theme.paletteType = 'dark'\r\n    //   } else {\r\n    //     theme.paletteType = 'light'\r\n    //   }\r\n    // }\r\n\r\n    // let theme = createMuiTheme({\r\n    //   palette: {\r\n    //     primary: {\r\n    //       light: lightGreen[300],\r\n    //       main: lightGreen[500],\r\n    //       dark: lightGreen[700]\r\n    //     },\r\n    //     secondary: {\r\n    //       light: blueGrey[300],\r\n    //       main: blueGrey[500],\r\n    //       dark: blueGrey[700]\r\n    //     },\r\n    //     type: this.state.themeType\r\n    //   }\r\n    // });\r\n\r\n    const { isThemeLight } = this.state;\r\n    // const theme = AutoTheme;\r\n    // const { users } = this.state;\r\n    // const { index } = this.state;\r\n    // const classes = useStyles();\r\n    const navitem = this.state.navitem;\r\n    const setNav = this.state.setNav;\r\n\r\n    const responseInstagram = (response) => {\r\n      console.log(response);\r\n\r\n      // //Передаем код авторизации для получения токена\r\n      fetch(apilink+'oauth', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          // user: {\r\n          authCode: response\r\n          // }\r\n        })\r\n      })\r\n        .then(response2 => {\r\n          if (response2.ok) {\r\n            return response2.text();\r\n          }\r\n        }\r\n        )\r\n        .then(function (data) {\r\n          console.log(data); // this will be a AccessToken\r\n          this.setState.accessToken = data;\r\n\r\n          // this.setState((state, props)=>({\r\n          //   accessToken: data\r\n          // }))\r\n        })\r\n        .catch(err => {\r\n          console.log('caught it!', err);\r\n        });\r\n    }\r\n    // this.state.usersMain.map(item => {\r\n    //   const perItemRows = this.renderItem(item);\r\n    //   allItemRows = allItemRows.concat(perItemRows);\r\n    // });\r\n\r\n\r\n\r\n    return <div className=\"App\">\r\n      {/* <ThemeProvider theme={theme}> */}\r\n      <Suspense fallback={<div>Загрузка...</div>}>\r\n        <ThemeProvider theme={isThemeLight ? themeLight : themeDark}>\r\n          <CssBaseline />\r\n          <Typography style={{ marginTop: 60 }}>\r\n            {/* Text should be white, background should be dark */}\r\n          </Typography>\r\n\r\n          <Header />\r\n\r\n          <MiniMenu />\r\n          {/* <CssBaseline />\r\n      <Typography style={{ marginTop: 50 }}>\r\n        Text should be white, background should be dark\r\n      </Typography>\r\n      <AppBar color=\"inherit\">\r\n        <Typography variant=\"h6\">App bar background should be dark!</Typography>\r\n      </AppBar> */}\r\n\r\n\r\n          <BrowserRouter>\r\n            <div>\r\n              \r\n              {/* Навигация с презентацие */}\r\n              {/* <Navigation /> */}\r\n\r\n\r\n              <Switch>\r\n                <Route path=\"/\" component={Home} exact />\r\n                <Route path=\"/about\" component={About} />\r\n                <Route path=\"/contact\" component={Contact} />\r\n                <Route path=\"/privacy\" component={Privacy} />\r\n                <Route path=\"/agreement\" component={Agreement} />\r\n                <Route path=\"/offer\" component={Offer} />\r\n                <Route component={Error} />\r\n              </Switch>\r\n\r\n            </div>\r\n          </BrowserRouter>\r\n\r\n          <Footer>\r\n\r\n            <span >\r\n\r\n              <BottomNavigation\r\n                value={this.navitem}\r\n                onChange={(event, newValue) => {\r\n                  // this.state.setNav = newValue;\r\n                  this.setState((state, props) => ({\r\n                    setNav: newValue\r\n                  }))\r\n                }}\r\n                showLabels\r\n              >\r\n                {/* <BottomNavigationAction label=\"Текушие раздачи\" icon={<RestoreIcon />} />\r\n          <BottomNavigationAction label=\"Избранные раздачи\" icon={<FavoriteIcon />} />\r\n          <BottomNavigationAction label=\"Раздачи рядом\" icon={<LocationOnIcon />} /> */}\r\n\r\n                {/* <InstagramLogin\r\n                clientId='296560698030895'\r\n                scope=\"user_profile,user_media\"\r\n                buttonText=\"Войти через Instagram\"\r\n                onSuccess={responseInstagram}\r\n                onFailure={responseInstagram}\r\n              /> */}\r\n\r\n                <span style={{ marginLeft: 15 }}>\r\n                  {/* <Toolbar isThemeLight = {isThemeLight} onThemeChange = {this.onThemeChange}/> */}\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Switcher\r\n                        checked={isThemeLight}\r\n                        onChange={this.onThemeChange}\r\n                        name=\"checkedB\"\r\n                        color=\"primary\"\r\n                      />\r\n                    }\r\n                    label={isThemeLight ? \"Светлая тема\" : \"Темная тема\"}\r\n                  />\r\n                </span>\r\n                <span style={{ marginLeft: 15 }}><a href=\"https://github.com/rhiskey\">rhiskey(C) 2020</a></span>\r\n              </BottomNavigation>\r\n            </span >\r\n          </Footer>\r\n\r\n        </ThemeProvider>\r\n      </Suspense>\r\n    </div>\r\n\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n\r\nfunction Footer({ children }) {\r\n  return (\r\n    <div>\r\n      <div className=\"phantomStyle\" />\r\n      <div className=\"footerStyle\">{children}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// class Child extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.state = {\r\n//       users: []\r\n//     };\r\n\r\n//   }\r\n//   async componentDidMount() {\r\n//     //this.getUsers();\r\n\r\n//     // //Subscribtion accs\r\n//     // let self = this;\r\n//     // fetch('/accounts', {\r\n//     //   method: 'GET'\r\n//     // }).then(function (response) {\r\n//     //   if (response.status >= 400) {\r\n//     //     throw new Error(\"Bad response from server\");\r\n//     //   }\r\n//     //   return response.json();\r\n//     // }).then(function (data) {\r\n//     //   self.setState({ users: data });\r\n//     // }).catch(err => {\r\n//     //   console.log('caught it!', err);\r\n//     // })\r\n\r\n//   }\r\n\r\n//   render() {\r\n//     // const { users } = this.state;\r\n\r\n//     return (<div id=\"posts-containter\">\r\n//       <h3>Подпишись на эти аккаунты:</h3>\r\n\r\n\r\n//       {/* {this.state.users.map(member =>\r\n//     <center><tr key={member.username}>\r\n//     <Post nickname={member.username} avatar={member.avatar} followlink={member.link} />\r\n//     </tr></center>\r\n//     )} */}\r\n\r\n//       <center><table className=\"User-table\" >\r\n//         <thead>\r\n//           <tr>\r\n//             <th>\r\n//               Аватар\r\n//                     </th>\r\n//             <th>\r\n//               Имя пользователя\r\n//                    </th>\r\n//             <th>\r\n//               Ссылка на подписку\r\n//                     </th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {this.state.users.map(member => {\r\n//             return (\r\n//               <tr key={member.username}>\r\n//                 <td>\r\n//                   <a href={member.link}>\r\n//                     <img className=\"instaImage\" border=\"0\" alt=\"FollowImage\" src={member.avatar} width=\"100\" height=\"100\"></img>\r\n//                   </a>\r\n//                 </td>\r\n//                 <td>\r\n//                   <a href={member.link}>{member.username}</a></td>\r\n//                 <td>\r\n//                   <a href={member.link} class=\"btn btn-primary\">Подпишись</a>\r\n//                 </td>\r\n//                 {/* <td dangerouslySetInnerHTML={{__html: member.Ban ? '<input checked=\"checked\" class=\"check-box\" disabled=\"disabled\" type=\"checkbox\">' : '<input class=\"check-box\" disabled=\"disabled\" type=\"checkbox\">'}}></td> */}\r\n//               </tr>\r\n//             );\r\n//           })\r\n//           }\r\n//         </tbody>\r\n//       </table></center>\r\n\r\n//     </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\nconst OtherComponent = React.lazy(() => import('fontsource-roboto'));","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}